Changes since 2006-07-28 
------------------------------------------------------------------------
r1 | jamie | 2006-07-28 13:50:35 +1000 (Fri, 28 Jul 2006) | 1 line

Initial commit.
------------------------------------------------------------------------
r2 | jamie | 2006-07-28 14:39:14 +1000 (Fri, 28 Jul 2006) | 6 lines

Removed debug.log which was accidentally committed.
Set svn:eol-style to CRLF on all files so that line endings will always be CRLF.
Set svn:ignore to ignore *.pyc and *.log in source and *.pyc in source/appModules and source/dictionaries.
Corrected svn:mime-type to audio/x-wav for files in source/waves.
Added setup.py to build NVDA with py2exe.

------------------------------------------------------------------------
r3 | jamie | 2006-07-28 15:38:51 +1000 (Fri, 28 Jul 2006) | 1 line

Load app modules by process name (minus extension) instead of class name. Implemented api.getProcessName() to facilitate this.
------------------------------------------------------------------------
r4 | mick | 2006-07-28 22:01:14 +1000 (Fri, 28 Jul 2006) | 1 line

put try except statements around the bodies of all event-called functions in MSAAEventHandler and keyEventHandler. Also edded a terminate function to MSAAEventHandler which is called from quit() in core.py so that the event hooks are deleted (stops the possible exceptions at exit time when an MSAAEvent gets fired afer NVDA has started exiting.
------------------------------------------------------------------------
r5 | mick | 2006-07-30 15:28:40 +1000 (Sun, 30 Jul 2006) | 1 line

created an initialize function in the audio module, and in all synth drivers, and call them with in the code, rather than having radmom code being called on import (forces more exceptions etc in to debug.log). Also created a config.py which for now contains things like speech_driver, speech_rate, speech_pitch, speech_volume etc, and reportClassOfClientObjects and reportClassOfAllObjects and reportKeyboardObjects ... all user-configurable variables. Also implemented wait=true for the sapi4 com driver.
------------------------------------------------------------------------
r6 | mick | 2006-08-01 12:36:23 +1000 (Tue, 01 Aug 2006) | 1 line

Really tried to speed up things in this version, changed object states back to bit patterns, rather than python sets, took out the really large try except bodies, this seemed to slow down more,  instead, just for now redirecting stderr to stderr.txt, greatly reduced the internal_objectEvent in msaaEventHandler by using a dictionary rather than 10000 if/elif statements. Now added config.py, sorry about that. also renamed core.py to core.pyw, now we have stderr.txt.
------------------------------------------------------------------------
r7 | jamie | 2006-08-07 20:49:59 +1000 (Mon, 07 Aug 2006) | 3 lines

Removed some debugging code related to getProcessName().
Delay for 1ms at the end of each iteration of the main loop to stop NVDA from hogging the CPU. A side effect is that NVDA runs faster also!

------------------------------------------------------------------------
r8 | jamie | 2006-08-07 22:25:02 +1000 (Mon, 07 Aug 2006) | 3 lines

Eureka! Let's make sure that silence.wav gets played asynchronously when silencing audio in audio.cancel(). Without this, playing silence.wav causes a slight delay in execution. This fix makes NVDA virtually instantaneous on my system with very little CPU!
If SilenceSpeech is received by the core, execute it and then immediately skip to the next iteration of the loop, as there is very probably another key waiting. This might make response to keys ever so slightly faster (and it might also cause CPU loading).

------------------------------------------------------------------------
r9 | jamie | 2006-08-07 22:55:42 +1000 (Mon, 07 Aug 2006) | 1 line

Updated setup script to build as NVDA.exe instead of core.exe. This still isn't that useful, though, because pyHook breaks. It will work if files aren't all bundled into the executable, but beeps every time a key is pressed, which is a bit nasty.
------------------------------------------------------------------------
r10 | jamie | 2006-08-08 16:32:56 +1000 (Tue, 08 Aug 2006) | 4 lines

Implement new configuration framework using ConfigObj. NVDA will now use a file called nvda.conf in the current directory. If not present, a default configuration will be created.
Includes ConfigObj modules. I have had to slightly modify configobj.py to fix what I think is a bug. todo: Contact author about this. :)
Change name of stderr.txt to stderr.log.

------------------------------------------------------------------------
r11 | jamie | 2006-08-08 16:48:29 +1000 (Tue, 08 Aug 2006) | 5 lines

I could of course test things before committing, but that'd be too logical. :)
Fixed silly errors in audio.py.
It's rather silly to have sapi4_com as a default when there's no such module as sapi4_com. In fact, SAPI 4 might not exist on some systems at all, so make it com_sapi5!
Changed rate multiplier in synth_com_sapi4 to be 8 instead of 4. It won't take 40 as a value, so the default rate of 10 breaks. Actually, this logic needs to be completely rethought, but this will do for now.

------------------------------------------------------------------------
r12 | jamie | 2006-08-08 18:20:57 +1000 (Tue, 08 Aug 2006) | 6 lines

Bah! Fixed the config stuff in appModules/default.py.
Changed the config schema for presentation settings. Having object as a sub-section of presentation was just a bit too evil.
Ensure that nvda.conf is written with CRLF line endings.
Always copy the defaults into the config file for a synth which does not yet have config data.
Write the config file when NVDA exits to facilitate this.

------------------------------------------------------------------------
r13 | jamie | 2006-08-08 19:10:21 +1000 (Tue, 08 Aug 2006) | 1 line

Allowed other key modifiers (alt, shift, etc.) to be used without insert. Hopefully, this won't break anything! I can't spot the alt+tab bug so far ...
------------------------------------------------------------------------
r14 | jamie | 2006-08-08 20:53:18 +1000 (Tue, 08 Aug 2006) | 7 lines

Ok! We now have a working stand-alone NVDA executable environment.
Disable bundling of files, as this causes pyHook to fail.
Include appModules, dictionaries, waves and synth modules in the dist directory. Failure to find silence.wav was the cause of the beeps in my last attempt. :)
To build, with py2exe installed, do:
setup.py py2exe
Then you can change to the dist directory, run nvda.exe and enjoy!

------------------------------------------------------------------------
r15 | jamie | 2006-08-08 20:56:38 +1000 (Tue, 08 Aug 2006) | 1 line

Fixed keyboard shortcuts for "move to and read parent object" and "move to and read first child object".
------------------------------------------------------------------------
r16 | jamie | 2006-08-08 23:07:50 +1000 (Tue, 08 Aug 2006) | 1 line

Lower case the application name when attempting to load its appModule.
------------------------------------------------------------------------
r17 | jamie | 2006-08-09 02:44:25 +1000 (Wed, 09 Aug 2006) | 4 lines

Implemented support for app module key bindings which should be triggered after first passing the key through to the application. This avoids the messy, redundant method of retriggering the key again in the function itself. To facilitate this, keyMap is now a dictionary with frozensets as keys and a tuple consisting of the function and a boolean as the value. The boolean should be True if the key should be passed to other applications, False if not.
Implemented ignoreNextKeyPress flag in keyEventHandler. This will be required once key triggering calls are implemented lest we have endless loops, though this will not be as important given the above functionality.
Initial versionof Microsoft Word app module. For now, it just speaks the new character when left and right are pressed.

------------------------------------------------------------------------
r18 | jamie | 2006-08-09 03:31:29 +1000 (Wed, 09 Aug 2006) | 4 lines

App module changes:
default: Prevent a crash in speakObject where states is None for whatever reason.
winword: Restrict speakCharacter() to the _WwG class.

------------------------------------------------------------------------
r19 | jamie | 2006-08-09 04:19:18 +1000 (Wed, 09 Aug 2006) | 1 line

Log and report an error if an app module fails to load or an app module event/function throws an exception, rather than crashing. Doesn't seem to slow things down here - revert if it's too sluggish.
------------------------------------------------------------------------
r20 | mick | 2006-08-09 11:49:27 +1000 (Wed, 09 Aug 2006) | 1 line

Now we have some basic mouse support. mouseEventHandler.py gets mouse events and puts them in queue_events ... core.pyw grabs them and passes them to the appModule as event_%s ... mouseMove so far. default.py now speaks the current object the mouse moves to, it checks to see if the object is the same as the last one, so that it only says it once.
------------------------------------------------------------------------
r21 | jamie | 2006-08-09 13:59:33 +1000 (Wed, 09 Aug 2006) | 1 line

Initial GUI code, though it does nothing visible right now. :)
------------------------------------------------------------------------
r22 | mick | 2006-08-09 19:07:24 +1000 (Wed, 09 Aug 2006) | 1 line

default appModule now reads tooltips
------------------------------------------------------------------------
r23 | mick | 2006-08-09 21:23:20 +1000 (Wed, 09 Aug 2006) | 3 lines

Changed the representation of key presses from one frozen set, to a tuple containing both a frozen set (holding the modifier keys) and a normal key. This is to make it easier to decompile the representation for when we wish to send the key back to the application. Sets are not ordered, but modifier keys need to be down before normal keys.


------------------------------------------------------------------------
r24 | mick | 2006-08-09 21:28:13 +1000 (Wed, 09 Aug 2006) | 1 line

Updated winword.py to the new key representation.
------------------------------------------------------------------------
r25 | mick | 2006-08-09 22:44:36 +1000 (Wed, 09 Aug 2006) | 1 line

Created an untested sendKey function in keyEventHandler. Also, renamed all key-bound scripts to be script_blabla and all of these now take keyPress as their argument so that its easy to sendKey from with in.
------------------------------------------------------------------------
r26 | mick | 2006-08-09 23:28:26 +1000 (Wed, 09 Aug 2006) | 1 line

Created script_upArrow, script_downArrow, script_leftArrow and script_rightArrow ... only really does what its always done, but now it uses sendKey and this means that we can now implement moving by word really easily.
------------------------------------------------------------------------
r27 | mick | 2006-08-10 15:10:57 +1000 (Thu, 10 Aug 2006) | 9 lines

Changed logic for ignoreNextKeyPress to make sure that it covers the entire key set, not just one key (say, a modifier key). It uses a counter which key down incriments, and key up decriments, and when it gets back to 0 it disables ignoreNextKeyPress.
Control arrows for words now work, though the actual getWindowWord code only  grabs until whitespace, which may not be the same as what the actual application does ...will ahve to fix this later.
Home, end and delete now speak.
Backspace not yet, because havn't found what its really called yet, plus have to think about best way of  getting the char then doing it, rather than the other way around.
Temporarily removed speakBySound out of speakObject because of sounds playing asynchronisly when reading an entire dialog box etc, have to think about this again.
Re-enabled reading of group names ... since we are now faster. But, group name code still has a large error where it thinks that controls after the group are actually in the group.
(Example system dialog, control panel, advanced tab, environment variables button).


------------------------------------------------------------------------
r28 | mick | 2006-08-10 19:10:03 +1000 (Thu, 10 Aug 2006) | 1 line

Added reportTooltips boolean to presentation settings and added reportObjectUnderMouse and reportMouseShapeChanges to mouse settings.
------------------------------------------------------------------------
r29 | mick | 2006-08-10 23:08:15 +1000 (Thu, 10 Aug 2006) | 1 line

Backupspace support is now here. Still need to work on selection support plus controlHome and controlEnd
------------------------------------------------------------------------
r30 | mick | 2006-08-11 12:34:53 +1000 (Fri, 11 Aug 2006) | 1 line

Removed some debugging beep code ... oops. Now speakObject reports either the selected text, the current line, or the full text (when its not multi-line) for the value of edit fields.
------------------------------------------------------------------------
r31 | mick | 2006-08-11 13:32:01 +1000 (Fri, 11 Aug 2006) | 1 line

shiftRight, shiftLeft, shiftHome, shiftEnd, shiftUp, shiftDown, controlShiftLeft and controlShiftRight all speak now. Also re-enabled readDialogObjects for when a dialog box is in the foreground.
------------------------------------------------------------------------
r32 | jamie | 2006-08-11 16:28:23 +1000 (Fri, 11 Aug 2006) | 1 line

Microsoft Word app module: up, down, ctrl+left and ctrl+right now read line/word, plus other miscellaneous minor changes to the code.
------------------------------------------------------------------------
r33 | mick | 2006-08-11 16:30:39 +1000 (Fri, 11 Aug 2006) | 1 line

Blank characters now say blank, blank lines now say blank ... fixed bug where line-character lines would not speak.
------------------------------------------------------------------------
r34 | jamie | 2006-08-11 17:20:43 +1000 (Fri, 11 Aug 2006) | 1 line

Handle SilenceSpeech in the main thread again, as SAPI 4 won't allow calls from the pyHook thread. SilenceSpeech is handled by core.pyw this time.
------------------------------------------------------------------------
r35 | jamie | 2006-08-11 17:50:30 +1000 (Fri, 11 Aug 2006) | 5 lines

config:
Config file is now called nvda.ini.
Don't create a default config file on start up if none exists. Instead, always save default config parameters that don't exist when the config file is saved on exit.
Don't save the config file if it is changed since it was last read.

------------------------------------------------------------------------
r36 | jamie | 2006-08-12 00:20:39 +1000 (Sat, 12 Aug 2006) | 1 line

GUI: Pressing insert+n brings up a context menu containing NVDA options. Unfortunately, there are some weird focus issues with this method and I can't seem to make the focus go straight to the context menu, so this is pretty useless right now (NVDA won't read it at all).
------------------------------------------------------------------------
r37 | mick | 2006-08-12 01:10:17 +1000 (Sat, 12 Aug 2006) | 1 line

Temporarily commented out time.sleep in core ... was trying it to see if it was the reason for the big delays  with run and wordpad etc, and um *coughs* why at least on my system is it still running just as fast? I do not get it ... plsu the run and wordpad thing is now wonderful ... is it because audio.cancel was really the big problem all along?
------------------------------------------------------------------------
r38 | mick | 2006-08-12 13:39:36 +1000 (Sat, 12 Aug 2006) | 1 line

ReadDialogObjects does not now read offscreen or invisible objects. Example in the shutdown dialog, there are heeps of options not shown on screen. In the future there may be reason though to let through some objects since some may be specifically for accessibility
------------------------------------------------------------------------
r39 | mick | 2006-08-13 19:40:57 +1000 (Sun, 13 Aug 2006) | 1 line

event_focusObject now checks to see if globalVars.focus_locator already has this window, objectID and child ID, and if so, then doesn't run. This stops double reading of the first menu item when moving to a menu bar etc. Also changed event_objectStateChange to check both globalVars.focus_locator and the focus state when reading state changes, and took out the speakBySound code from this function, still not sure what to do with it.
------------------------------------------------------------------------
r40 | jamie | 2006-08-13 22:06:29 +1000 (Sun, 13 Aug 2006) | 1 line

core.main(): Reinstate the 1 ms sleep at the end of the loop, but only sleep if there are no events already waiting in the queues. This allows us to deal with a huge batch of events without a pause after each event, but also not to hog the CPU when there are no events waiting. Solves the delays with run, launching Wordpad, etc., which for some reason cause a large flood of MSAA events.
------------------------------------------------------------------------
r41 | jamie | 2006-08-13 23:49:55 +1000 (Sun, 13 Aug 2006) | 5 lines

gui:
MenuFrame: Set the foreground window to the menu window and then reset to the previous foreground window. Unfortunately, although this seems to work flawlessly when tested outside of NVDA, win32gui.SetForegroundWindow() throws an exception with no useful error message most of the time when trying within NVDA. I have no idea why!
core.quit() now uses gui.terminate() rather than calling gui.MainFrame.Close() directly.
todo: Why the hell does NVDA completely refuse to read GUI windows created within itself? If I run the gui code in another Python interpretor while running NVDA, it reads, but not if I press insert+n from within NVDA, even though both Narrator and JAWS read the menu and dialog correctly.

------------------------------------------------------------------------
r42 | mick | 2006-08-13 23:56:45 +1000 (Sun, 13 Aug 2006) | 1 line

Added logic to read entering and exiting menus properly (reads the name of the actual menubar or popupmenu, and only reads items when its sure its in a menu).  Supressed reading of name and role of shell_trayWnd and progman client  (start button / taskbar and desktop). Fixed bug in event_focusObject where it would report an objects container again after one of its children. Also  got rid of reading the name and role (application) in event_appChange, seems a bit too much info.
------------------------------------------------------------------------


Changes since 20060713-1
*Got rid of synth modules and output tokens, and wrote one audio module that handles speech and sounds.
This now means that we no longer have to depend on the media player com server for sounds. This also means that all info about an object can be sent to the synth in one go, with optional xml around each property. we now have audio.speakMessage, audio.speakSymbol, audio.speakText, audio.playSound and audio.speakObjectProperties. This also clears the way for later implementing braille support. 
*Moved all the navigation functions in to the default app module.
*GetObjectStates now returns a set of states rather than the origional bit pattern, so now it is easier to compare groups of sets with python set methods and keywords.
*character symbols, text symbols, role names and state names are now stored in a subdirectory called dictionaries and are all loaded in a similar way in the code.
*Added exit message in speech when quitting, makes sure that speech is not asynchronis so it can complete the message.
*Reimplemented synth drivers, but now all controled from the audio module.
*Created a basic sapi4 com synth driver
*Implemented sound support in the audio module using winsound
*Implemented a speakBySound infrastructure in the default appModule, can set certain states or lines etc to play a sound rather than speaking


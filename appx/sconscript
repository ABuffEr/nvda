import subprocess
import versionInfo

Import(['env'])

def getCertPublisher(env):
	certFile=env.get('certFile')
	if not certFile:
		return env['publisher']
	certPassword=env.get('certPassword','')
	cmd=['certutil','-dump','-p',certPassword,File('#'+certFile).abspath.replace('/','\\')]
	lines=subprocess.check_output(cmd).splitlines()
	linePrefix='Subject: '
	for line in lines:
		if line.startswith(linePrefix):
			subject=line[len(linePrefix):].rstrip()
			return subject

signExec=env['signExec'] if env['certFile'] else None
certPublisher=getCertPublisher(env)

# Create an appx manifest with version and publisher etc all filled in 
manifest=env.Substfile(
	"AppxManifest.xml",
	'manifest.xml.subst',
	SUBST_DICT={
		'%name%':versionInfo.name,
		'%version%':"%s.%s.%s.%s"%(versionInfo.version_year,versionInfo.version_major,versionInfo.version_minor,env['version_build']),
		'%certPublisher%':certPublisher,
		'%publisher%':env['publisher'],
		'%productName%':"%s (%s)"%(versionInfo.name,versionInfo.longName),
		'%description%':versionInfo.description,
	},
)
# Make a copy of the dist dir produced by py2exe 
# And also place some extra appx specific images in there
appxContent=env.Command(
	target='content',
	source=[Dir("#dist"),Dir('#appx/appx_images'),manifest],
	action=[
		Delete("$TARGET"),
		Copy("$TARGET","${SOURCES[0]}"),
		Copy("${TARGET}\\appx_images","${SOURCES[1]}"),
		Copy("${TARGET}\\AppxManifest.xml","${SOURCES[2]}"),
	]
)
# Ensure that it is always copied as we can't tell if dist changed 
env.AlwaysBuild(appxContent)
# Package the appx
appx=env.Command(File('#output\\nvda_%s.appx'%env['version']),appxContent,"makeappx pack /p $TARGET /d $SOURCE")
if signExec:
	env.AddPostAction(appx,[signExec])
#env.Depends(appx,appxContent)
env.Alias('appx',appx)
